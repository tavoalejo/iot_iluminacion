

// // Create and Deploy Your First Cloud Functions
// // https://firebase.google.com/docs/functions/write-firebase-functions
//
// exports.helloWorld = functions.https.onRequest((request, response) => {
//  response.send("Hello from Firebase!");
// });

const functions = require('firebase-functions');
const admin = require('firebase-admin');
const bigquery = require('@google-cloud/bigquery')();
const moment = require('moment');
const cors = require('cors')({ origin: true });

admin.initializeApp(functions.config().firebase);

const db = admin.database();

/**
 * Receive data from pubsub, then 
 * Write telemetry raw data to bigquery
 * Maintain last data on firebase realtime database
 */
exports.receiveTelemetry = functions.pubsub
  .topic('iot-topic')
  .onPublish(event => {
    const attributes = event.attributes;
    const message = event.data ? Buffer.from(event.data, 'base64').toString() : null;;
    let json_message = JSON.parse(message);
      
  	let mivalor = null;
  	try {
    	mivalor = json_message.mi_valor;
  	}	 catch (e) {
    	console.error('PubSub message was not JSON', e);
  	}
    
    console.log('valor',mivalor);
   // console.log('mensaje',message);
	
    //const deviceId = attributes['deviceId'];

    const data = {
      deviceId: attributes.deviceId,
      ilum: mivalor,
      lasttimestamp: moment().format('YYYY-MM-DD HH:mm:ss.SSS')
    };
    
     if (
      mivalor < -1024 ||
      mivalor > 10000
    ) {
      // Validate and do nothing
      return;
    }


    return Promise.all([
      insertIntoBigquery(data),
      updateCurrentDataFirebase(data)
    ]);
  });

/** 
 * Maintain last status in firebase
*/
function updateCurrentDataFirebase(data) {
  return db.ref(`/devices/${data.deviceId}`).set({
    iluminacion: data.ilum,
    lastTimestamp: data.lasttimestamp
  });
}

/**
 * Store all the raw data in bigquery
 */
function insertIntoBigquery(data) {
  // TODO: Make sure you set the `bigquery.datasetname` Google Cloud environment variable.
  const dataset = bigquery.dataset(functions.config().bigquery.datasetname);
  // TODO: Make sure you set the `bigquery.tablename` Google Cloud environment variable.
  const table = dataset.table(functions.config().bigquery.tablename);

  return table.insert(data);
}

/**
 * Query bigquery with the last 7 days of data
 * HTTPS endpoint to be used by the webapp
 */
 
/* 
exports.getReportData = functions.https.onRequest((req, res) => {
  const table = '`tavoalejoapcl.luces_iot.raw_data`';

  const query = `
    SELECT 
      TIMESTAMP_TRUNC(data.timestamp, HOUR, 'America/Cuiaba') data_hora,
      avg(data.ilum) as avg_ilum,
      min(data.ilum) as min_ilum,
      max(data.ilum) as max_ilum,
      count(*) as data_points      
    FROM ${table} data
    WHERE data.timestamp between timestamp_sub(current_timestamp, INTERVAL 7 DAY) and current_timestamp()
    group by data_hora
    order by data_hora
  `;

  return bigquery
    .query({
      query: query,
      useLegacySql: false
    })
    .then(result => {
      const rows = result[0];

      cors(req, res, () => {
        res.json(rows);
      });
    });
});
*/
